// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}


// Validate ../../src/app/IBN-2022/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/IBN-2022">> = Specific
  const handler = {} as typeof import("../../src/app/IBN-2022/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/about-us/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/about-us">> = Specific
  const handler = {} as typeof import("../../src/app/about-us/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/academy/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/academy">> = Specific
  const handler = {} as typeof import("../../src/app/academy/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/activities/[categoryId]/[categoryKey]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/activities/[categoryId]/[categoryKey]">> = Specific
  const handler = {} as typeof import("../../src/app/activities/[categoryId]/[categoryKey]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/announcements/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/announcements">> = Specific
  const handler = {} as typeof import("../../src/app/announcements/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/bonus-cards/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/bonus-cards">> = Specific
  const handler = {} as typeof import("../../src/app/bonus-cards/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/gallery/images/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/gallery/images">> = Specific
  const handler = {} as typeof import("../../src/app/gallery/images/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/gallery/videos/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/gallery/videos">> = Specific
  const handler = {} as typeof import("../../src/app/gallery/videos/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/news/[id]/[slug]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/news/[id]/[slug]">> = Specific
  const handler = {} as typeof import("../../src/app/news/[id]/[slug]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/news/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/news">> = Specific
  const handler = {} as typeof import("../../src/app/news/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/our-services/b2b/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/our-services/b2b">> = Specific
  const handler = {} as typeof import("../../src/app/our-services/b2b/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/our-services/b2c/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/our-services/b2c">> = Specific
  const handler = {} as typeof import("../../src/app/our-services/b2c/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/our-services/marketing/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/our-services/marketing">> = Specific
  const handler = {} as typeof import("../../src/app/our-services/marketing/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/our-services/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/our-services">> = Specific
  const handler = {} as typeof import("../../src/app/our-services/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/our-services/social-activities/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/our-services/social-activities">> = Specific
  const handler = {} as typeof import("../../src/app/our-services/social-activities/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/partners/[id]/[slug]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/partners/[id]/[slug]">> = Specific
  const handler = {} as typeof import("../../src/app/partners/[id]/[slug]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/partners/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/partners">> = Specific
  const handler = {} as typeof import("../../src/app/partners/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/team/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/team">> = Specific
  const handler = {} as typeof import("../../src/app/team/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/trainings/[id]/[slug]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/trainings/[id]/[slug]">> = Specific
  const handler = {} as typeof import("../../src/app/trainings/[id]/[slug]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/trainings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/trainings">> = Specific
  const handler = {} as typeof import("../../src/app/trainings/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}







// Validate ../../src/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
